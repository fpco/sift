[{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "$trModule"}
,"refs": [{"package": "ghc-prim"
,"module": "GHC.Types"
,"name": "Module"}
,{"package": "ghc-prim"
,"module": "GHC.Types"
,"name": "TrNameS"}]}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "threadWaitWriteSTM"}
,"refs": [{"package": "base"
,"module": "GHC.Conc.IO"
,"name": "threadWaitWriteSTM"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "fd"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 467
,"start-col": 1
,"end-line": 481
,"end-col": 35}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "threadWaitReadSTM"}
,"refs": [{"package": "base"
,"module": "GHC.Conc.IO"
,"name": "threadWaitReadSTM"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "fd"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 443
,"start-col": 1
,"end-line": 457
,"end-col": 34}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "threadWaitWrite"}
,"refs": [{"package": "base"
,"module": "GHC.Conc.IO"
,"name": "threadWaitWrite"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "fd"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 428
,"start-col": 1
,"end-line": 433
,"end-col": 32}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "threadWaitRead"}
,"refs": [{"package": "base"
,"module": "GHC.Conc.IO"
,"name": "threadWaitRead"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "fd"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 403
,"start-col": 1
,"end-line": 417
,"end-col": 31}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "unsafeResult"}
,"refs": [{"package": "base"
,"module": "Data.Either"
,"name": "either"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "throwIO"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "return"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 390
,"start-col": 1
,"end-line": 390
,"end-col": 47}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "isCurrentThreadBound"}
,"refs": [{"package": "ghc-prim"
,"module": "GHC.Types"
,"name": "IO"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "ghc-prim"
,"module": "GHC.Prim"
,"name": "isCurrentThreadBound#"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "s#"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "s2#"}
,{"package": "ghc-prim"
,"module": "GHC.Types"
,"name": "isTrue#"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "flg"}
,{"package": "ghc-prim"
,"module": "GHC.Prim"
,"name": "/=#"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 330
,"start-col": 1
,"end-line": 332
,"end-col": 58}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "runInUnboundThread"}
,"refs": [{"package": "base"
,"module": "Control.Concurrent"
,"name": "isCurrentThreadBound"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>="}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "bound"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "newEmptyMVar"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "mask"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "GHC.Conc.Sync"
,"name": "forkIO"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "Control.Exception.Base"
,"name": "try"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "restore"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "putMVar"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "mv"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "takeMVar"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "catchException"}
,{"package": "base"
,"module": "GHC.Conc.Sync"
,"name": "throwTo"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "tid"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "e"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "wait"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "wait"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "unsafeResult"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 377
,"start-col": 1
,"end-line": 387
,"end-col": 16}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "failNonThreaded"}
,"refs": [{"package": "base"
,"module": "GHC.Base"
,"name": "fail"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "++"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 295
,"start-col": 1
,"end-line": 296
,"end-col": 60}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS"}
,"refs": [{"package": "base"
,"module": "Control.Concurrent"
,"name": "rtsSupportsBoundThreads"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "newEmptyMVar"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>="}
,{"package": "base"
,"module": "GHC.IO"
,"name": "getMaskingState"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "b"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "unsafeUnmask"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action0"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "uninterruptibleMask_"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "catchException"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action1"}
,{"package": "base"
,"module": "GHC.Conc.Sync"
,"name": "childHandler"}
,{"package": "base"
,"module": "GHC.Stable"
,"name": "newStablePtr"}
,{"package": "base"
,"module": "GHC.Conc.Sync"
,"name": "myThreadId"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "putMVar"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "mv"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action_plus"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS_createThread"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "entry"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "when"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "err"}
,{"package": "ghc-prim"
,"module": "GHC.Classes"
,"name": "/="}
,{"package": "base"
,"module": "GHC.Num"
,"name": "fromInteger"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "fail"}
,{"package": "base"
,"module": "GHC.MVar"
,"name": "takeMVar"}
,{"package": "base"
,"module": "GHC.Stable"
,"name": "freeStablePtr"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "return"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "tid"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "otherwise"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "failNonThreaded"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 298
,"start-col": 1
,"end-line": 319
,"end-col": 34}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOSWithUnmask"}
,"refs": [{"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "io"}
,{"package": "base"
,"module": "GHC.IO"
,"name": "unsafeUnmask"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 324
,"start-col": 1
,"end-line": 324
,"end-col": 47}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "runInBoundThread"}
,"refs": [{"package": "base"
,"module": "Control.Concurrent"
,"name": "rtsSupportsBoundThreads"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "isCurrentThreadBound"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>="}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "bound"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action"}
,{"package": "base"
,"module": "GHC.IORef"
,"name": "newIORef"}
,{"package": "base"
,"module": "GHC.Err"
,"name": "undefined"}
,{"package": "base"
,"module": "Control.Exception.Base"
,"name": "try"}
,{"package": "base"
,"module": "GHC.IORef"
,"name": "writeIORef"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "ref"}
,{"package": "base"
,"module": "Control.Exception.Base"
,"name": "bracket"}
,{"package": "base"
,"module": "GHC.Stable"
,"name": "newStablePtr"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action_plus"}
,{"package": "base"
,"module": "GHC.Stable"
,"name": "freeStablePtr"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS_entry_reimported"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "cEntry"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>"}
,{"package": "base"
,"module": "GHC.IORef"
,"name": "readIORef"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "unsafeResult"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "otherwise"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "failNonThreaded"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 346
,"start-col": 1
,"end-line": 358
,"end-col": 34}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS_entry"}
,"refs": [{"package": "base"
,"module": "GHC.Stable"
,"name": "deRefStablePtr"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "stableAction"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>="}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 287
,"start-col": 1
,"end-line": 289
,"end-col": 15}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "forkFinally"}
,"refs": [{"package": "base"
,"module": "GHC.IO"
,"name": "mask"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "GHC.Conc.Sync"
,"name": "forkIO"}
,{"package": "base"
,"module": "GHC.Base"
,"name": "$"}
,{"package": "base"
,"module": "Control.Exception.Base"
,"name": "try"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "restore"}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "action"}
,{"package": "base"
,"module": "GHC.Base"
,"name": ">>="}
,{"package": "base"
,"module": "Control.Concurrent"
,"name": "and_then"}]
,"src-span": {"file": "libraries/base/Control/Concurrent.hs"
,"start-line": 198
,"start-col": 1
,"end-line": 200
,"end-col": 47}}
,{"id": {"package": "base"
,"module": "Control.Concurrent"
,"name": "$fstableZC1ZCbaseZCControlziConcurrentZCforkOSzuentry"}
,"refs": [{"package": "base"
,"module": "Control.Concurrent"
,"name": "forkOS_entry"}]}]